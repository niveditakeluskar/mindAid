import{_ as f,l as o,m as c,r as m,o as w,c as u}from"./appInertia-bd981cc7.js";import v from"./AgGridTable-ef5374d2.js";import"./AgGridTable.vue_vue_type_style_index_0_lang-56c71005.js";const N={props:{patientId:Number,deviceID:Number,fromDate:Date,toDate:Date},components:{AgGridTable:v},setup(e){const r=o([]),a=o();let t=[{headerName:"TimeStamp",field:"csseffdate"},{headerName:"Reading",children:[{field:"threshold",width:180},{headerName:"Systolic",field:"readingone",width:90},{headerName:"Diastolic",field:"readingtwo",width:140},{headerName:"Threshold",field:"heartrate_threshold",width:140},{headerName:"Heartrate",field:"heartratereading",width:140}]}];e.deviceID==1?(a.value="observationsweight",t=[{headerName:"TimeStamp",field:"csseffdate"},{headerName:"Reading",children:[{field:"threshold",width:180},{headerName:"Weight",field:"readingone",width:90}]}]):e.deviceID==2?(a.value="observationsoxymeter",t=[{headerName:"TimeStamp",field:"csseffdate"},{headerName:"Reading",children:[{field:"threshold",width:180},{headerName:"SpO2",field:"readingone",width:90},{headerName:"Perfusion Index",field:"readingtwo",width:90},{headerName:"Threshold",field:"heartrate_threshold",width:140},{headerName:"Heartrate",field:"heartratereading",width:140}]}]):e.deviceID==3?a.value="observationsbp":e.deviceID==4?(a.value="observationstemp",t=[{headerName:"TimeStamp",field:"csseffdate"},{headerName:"Reading",children:[{field:"threshold",width:180},{headerName:"Temperature",field:"readingone",width:90}]}]):e.deviceID==5?(a.value="observationsspirometer",t=[{headerName:"TimeStamp",field:"csseffdate"},{headerName:"Reading",children:[{field:"threshold",width:180},{headerName:"FEV1 Value",field:"readingone",width:90},{headerName:"PEF Value",field:"readingtwo",width:140}]}]):e.deviceID==6?(a.value="observationsglucose",t=[{headerName:"TimeStamp",field:"csseffdate"},{headerName:"Reading",children:[{field:"threshold",width:180},{headerName:"Glucose Level",field:"readingone",width:90}]}]):a.value="observationsbp";let l=o(t);const i=async()=>{try{let d="observationsbp";await new Promise(h=>setTimeout(h,2e3));const s=await fetch(`/rpm/patient-alert-history-list-device-link/${e.patientId}/${a.value}/${e.fromDate}/${e.toDate}`);if(!s.ok)throw new Error("Failed to fetch followup task list");const n=await s.json();r.value=n.data}catch(d){console.error("Error fetching followup task list:",d)}};return c(async()=>{try{i()}catch(d){console.error("Error on page load:",d)}}),{columnDefs:l,colDefs:t,rowData:r,fetchFollowupMasterTaskList:i,table:a}}};function g(e,r,a,t,l,i){const d=m("AgGridTable");return w(),u(d,{rowData:t.rowData,columnDefs:t.columnDefs},null,8,["rowData","columnDefs"])}const b=f(N,[["render",g]]);export{b as default};
